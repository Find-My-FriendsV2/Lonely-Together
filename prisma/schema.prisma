// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  createdEvents Event[]    @relation("CreatedBy")

  username      String? @unique

  image       String?
  accounts    Account[]
  sessions    Session[]
  Post        Post[]
  Comment     Comment[]
  CommentVote CommentVote[]
  eventRegister   EventRegister[]
  // vote        Vote[]
}

model Event {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  creatorId   String?
  Creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  eventRegister   EventRegister[]

  @@index([name])
  @@index([creatorId])
}

model EventRegister {
  user User @relation(fields: [userId], references: [id])
  userId String
  event Event @relation(fields: [eventId], references: [id])
  eventId String

  @@id([userId, eventId])
  @@index([eventId])
}


model Post {
  id String  @id @default(cuid())
  title String
  content Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Event  Event @relation(fields: [eventId], references: [id])
  eventId String

  author User @relation(fields: [authorId], references: [id])
  authorId String

  comments Comment[]
  // votes Vote[]

  @@index([authorId])
  @@index([eventId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?

  @@index([replyToId])
  @@index([postId])
  @@index([authorId])
}



// enum VoteType {
//  UP
//  DOWN
// }


model CommentVote {
  user User @relation(fields: [userId], references: [id])
  userId String
  comment Comment @relation(fields: [commentId], references: [id])
  commentId String
  // type VoteType

  @@id ([userId, commentId])
  @@index([commentId])
}




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//change to ratings later


// model Vote {
//   user   User     @relation(fields: [userId], references: [id])
//   userId String
//   post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
//   postId String
//   type   VoteType

//   @@id([userId, postId])
//   @@index([postId])
// }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////






















































// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider     = "postgresql"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   createdEvents Event[]    @relation("CreatedBy")

//   username      String? @unique

//   image       String?
//   accounts    Account[]
//   sessions    Session[]
//   Post        Post[]
//   Comment     Comment[]
//   CommentVote CommentVote[]
//   eventRegister   EventRegister[]
//   vote        Vote[]
// }

// model Event {
//   id String @id @default(cuid())
//   name String @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   posts Post[]

//   creatorId   String?
//   Creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
//   joinevent   JoinEvent[]

//   @@index([name])
// }

// model JoinEvent {
//   user User @relation(fields: [userId], references: [id])
//   userId String
//   event Event @relation(fields: [eventId], references: [id])
//   eventId String

//   @@id([userId, eventId])
// }

// model Post {
//   id String  @id @default(cuid())
//   title String
//   content Json?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   eventId String
//   Event  Event @relation(fields: [eventId], references: [id])

//   authorId String
//   author User @relation(fields: [authorId], references: [id])

//   comments Comment[]
// }

// model Comment {
//   id        String   @id @default(cuid())
//   text      String
//   createdAt DateTime @default(now())
//   authorId  String
//   author    User     @relation(fields: [authorId], references: [id])
//   postId    String
//   post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

//   replyToId String?
//   replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   replies   Comment[] @relation("ReplyTo")

//   votes     CommentVote[]
// }

// enum VoteType {
//   UP
//   DOWN
// }

// model Vote {
//   user   User     @relation(fields: [userId], references: [id])
//   userId String
//   post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
//   postId String
//   type   VoteType

//   @@id([userId, postId])
// }

// model CommentVote {
//   user User @relation(fields: [userId], references: [id])
//   userId String
//   comment Comment @relation(fields: [commentId], references: [id])
//   commentId String
//   type VoteType

//   @@id([userId, commentId])
// }