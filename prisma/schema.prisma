// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  createdEvents Event[]    @relation("CreatedBy")

  username      String? @unique

  image       String?
  accounts    Account[]
  sessions    Session[]
  Post        Post[]
  Comment     Comment[]
  CommentVote CommentVote[]
  joinEvent   JoinEvent[]
  // vote        Vote[]
}

// model Event {
//   id        String   @id @default(cuid())
//   name      String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   posts     Post[]

//   creatorId   String?
//   Creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
//   joinEvent   JoinEvent[]

//   @@index([name])
//   @@index([creatorId])
// }



model Post {
  id String  @id @default(cuid())
  title String
  content Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Event  Event @relation(fields: [eventId], references: [id])
  eventId String

  author User @relation(fields: [authorId], references: [id])
  authorId String

  comments Comment[]
  // votes Vote[]

  @@index([authorId])
  @@index([eventId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?

  @@index([replyToId])
  @@index([postId])
  @@index([authorId])
}



// enum VoteType {
//  UP
//  DOWN
// }


model CommentVote {
  user User @relation(fields: [userId], references: [id])
  userId String
  comment Comment @relation(fields: [commentId], references: [id])
  commentId String
  // type VoteType

  @@id ([userId, commentId])
  @@index([commentId])
}






///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////MVP-AFTER-VID
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
model Event {
  id               String       @id @default(cuid())
  name             String       @unique
  description      String
  location         String
  startDateTime    DateTime
  endDateTime      DateTime
  maxParticipants  Int
  currentParticipants Int       @default(0)
  eventImage       String?
  tags             String[]
  rsvpDeadline     DateTime
  status           EventStatus  @default(UPCOMING)
  eventType        EventType    @default(IN_PERSON)
  visibility       EventVisibility @default(PUBLIC)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  posts            Post[]
  creatorId        String?
  Creator          User?        @relation("CreatedBy", fields: [creatorId], references: [id])
  joinEvent        JoinEvent[]

  @@index([name])
  @@index([creatorId])
}

model JoinEvent {
  user User @relation(fields: [userId], references: [id])
  userId String
  event Event @relation(fields: [eventId], references: [id])
  eventId String

  @@id([userId, eventId])
  @@index([eventId])
}
enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum EventType {
  ONLINE
  IN_PERSON
  HYBRID
}

enum EventVisibility {
  PUBLIC
  PRIVATE
  FRIENDS_ONLY
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////EXPANSION
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////






















































